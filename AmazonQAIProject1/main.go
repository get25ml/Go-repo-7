// ------------------------------------------------------------------------------
// <generated>
// This code was generated by Amazon Q
// Runtime Version: 1.0
// </generated>
// ------------------------------------------------------------------------------
package main

import (
	"encoding/json"
	"fmt"
	"github.com/go-chi/chi/v5"
	"github.com/satori/go.uuid"
	"html/template"
	"io/ioutil"
	"net/http"
)

type Note struct {
	ID      string `json:"id"`
	Title   string `json:"title"`
	Content string `json:"content"`
}

type NotesData struct {
	Notes []Note
}

var data NotesData

var note1 = Note{
	ID:    "1",
	Title: "Sample Note 1",
	// etc
}

var note2 = Note{
	// etc
}

var notes = []Note{
	{
		ID:    "1",
		Title: "Sample Note 1",
	},
	{
		ID:    "2",
		Title: "Sample Note 2",
		// etc
	},
}

func init() {
	// bytes, _ := ioutil.ReadFile("notes.json")
	// json.Unmarshal(bytes, &data)
	bytes, err := ioutil.ReadFile("notes.json")
	if err != nil {
		// handle error
	}

	if err := json.Unmarshal(bytes, &data); err != nil {
		// handle error
	}
	data.Notes = append(data.Notes, Note{"1",
		"Sample Title",
		"Note content"})
	data.Notes = append(data.Notes, Note{"2",
		"Sample Title 2",
		"Note content 2"})
	fmt.Println(data)

}

// Create
func createNoteHandler(w http.ResponseWriter, r *http.Request) {

	// Parse request body
	decoder := json.NewDecoder(r.Body)
	var note Note
	err := decoder.Decode(&note)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	// Generate UUID for ID
	// note.ID = uuid.New().String()
	note.ID = uuid.NewV4().String()

	// Add note to slice
	notes = append(notes, note)

	// Return created note
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(note)

}

// Read
func getNotesHandler(w http.ResponseWriter, r *http.Request) {

	// Encode notes slice to JSON
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(notes)

}

// Update
func updateNoteHandler(w http.ResponseWriter, r *http.Request) {

	// Parse ID from request
	id := chi.URLParam(r, "id")

	// Decode updated note data from request body
	decoder := json.NewDecoder(r.Body)
	var updatedNote Note
	err := decoder.Decode(&updatedNote)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	// Find note to update
	for i, note := range notes {
		if note.ID == id {
			notes[i] = updatedNote
			break
		}
	}

	// Return updated note
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(updatedNote)

}

// Delete
func deleteNoteHandler(w http.ResponseWriter, r *http.Request) {

	// Parse ID from request
	id := chi.URLParam(r, "id")

	// Find note to delete
	for i, note := range notes {
		if note.ID == id {
			notes = append(notes[:i], notes[i+1:]...)
			break
		}
	}

	// Return success response
	w.WriteHeader(http.StatusOK)

}

// Render notes page
func notesPageHandler(w http.ResponseWriter, r *http.Request) {

	// Render notes.html template
	tmpl, _ := template.ParseFiles("notes.html")

	// Pass notes slice to template
	// err := tmpl.Execute(w, notes)

	err := tmpl.Execute(w, data.Notes)
	fmt.Println(len(data.Notes))
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

}

func indexHandler(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Welcome!")
}

func aboutHandler(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "About page")
}

func notesHandler(w http.ResponseWriter, r *http.Request) {

	// Parse notes.html template
	tmpl, err := template.ParseFiles("notes.html")
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	// Execute template passing data

	err = tmpl.Execute(w, data.Notes)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

}

func main() {

	// Route handlers
	http.HandleFunc("/", indexHandler)
	http.HandleFunc("/about", aboutHandler)
	http.HandleFunc("/notes/v1", notesPageHandler)
	http.HandleFunc("/notes/v2", notesHandler)
	http.HandleFunc("/notes/new", createNoteHandler)
	http.HandleFunc("/notes/update", updateNoteHandler)
	http.HandleFunc("/notes/delete", deleteNoteHandler)
	http.HandleFunc("/notes/list", getNotesHandler)

	// Start server
	fmt.Println("Starting server on port 8080")
	http.ListenAndServe(":8080", nil)
}
