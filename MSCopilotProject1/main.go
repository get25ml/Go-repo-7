//
// This project was generated by Copilot, an AI companion that helps you write better code
//

package main

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strconv"

	"github.com/gorilla/mux"
)

// greetHandler is a handler function that writes a greeting message to the response
func greetHandler(w http.ResponseWriter, r *http.Request) {
	// get the name parameter from the URL query string
	name := r.URL.Query().Get("name")
	if name == "" {
		// if no name is provided, use "World" as a default
		name = "World"
	}
	// write the greeting message to the response
	fmt.Fprintf(w, "Hello, %s!\n", name)
}

func usersHandler(w http.ResponseWriter, r *http.Request) {
	switch r.Method {
	case http.MethodGet:
		// replace // logic for getting all users by some demo output
		// create a map of users with some dummy data
		users := map[string]string{
			"alice": "Alice Smith",
			"bob":   "Bob Jones",
			"carol": "Carol Lee",
		}
		// convert the map to a JSON byte slice
		jsonData, err := json.Marshal(users)
		if err != nil {
			// handle error
		}
		// write the JSON byte slice to the response
		w.Write(jsonData)
	case http.MethodPost:
		// replace // logic for creating a new user by some demo output
		// create a struct to hold the user data
		type User struct {
			Name  string `json:"name"`
			Email string `json:"email"`
		}
		// create a new user with some dummy data
		user := User{
			Name:  "Dan Brown",
			Email: "dan@example.com",
		}
		// convert the struct to a JSON byte slice
		jsonData, err := json.Marshal(user)
		if err != nil {
			// handle error
		}
		// write the JSON byte slice to the response
		w.Write(jsonData)
	default:
		// replace // logic for unsupported methods by some demo output
		// write an error message to the response
		fmt.Fprintf(w, "Method not supported\n")
	}
}

func noteHandler(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	note_id, err := strconv.Atoi(vars["note_id"])
	if err != nil {
		// handle error
	}
	// replace // logic for getting a note by its id by some demo output
	// create a struct to hold the note data
	type Note struct {
		ID    int    `json:"id"`
		Title string `json:"title"`
		Body  string `json:"body"`
	}
	// create a note with some dummy data
	note := Note{
		ID:    note_id,
		Title: "My first note",
		Body:  "This is a sample note",
	}
	// convert the struct to a JSON byte slice
	jsonData, err := json.Marshal(note)
	if err != nil {
		// handle error
	}
	// write the JSON byte slice to the response
	w.Write(jsonData)
}

func main() {
	// create a log file
	logFile, err := os.OpenFile("log.txt", os.O_CREATE|os.O_APPEND|os.O_RDWR, 0666)
	if err != nil {
		panic(err)
	}

	//
	// don't forget to close it
	defer logFile.Close()
	// create a multiwriter that writes to both the standard output and the log file
	mw := io.MultiWriter(os.Stdout, logFile)
	// set the output destination of the standard logger to the multiwriter
	log.SetOutput(mw)
	// create a router using the mux package
	router := mux.NewRouter()
	// register the greetHandler function for the "/greet" route
	router.HandleFunc("/greet", greetHandler)
	// register the usersHandler function for the "/users" route
	router.HandleFunc("/users", usersHandler)
	// register the noteHandler function for the "/notes/{note_id}" route
	router.HandleFunc("/notes/{note_id}", noteHandler)
	// start the web server on port 8080 and log any errors
	log.Println("Starting server on port 8080")
	err = http.ListenAndServe(":8080", router)
	if err != nil {
		log.Fatal(err)
	}
}
